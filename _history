{"entries":[{"timestamp":1734560523247,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"OER]qz;9*WAb|E44}Fs:\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\";X+m(fEiFf64Vq@2wo=)\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//% color=\"#00CC00\" icon=\"\\u2B88\"\n//% block=\"XGO Lite\"\n//% block.loc.nl=\"XGO Lite\"\nnamespace CXgoLite {\n\n    //////////////\n    // MESSAGES //\n    //////////////\n\n    // The XGo is programmed by means of messages.\n    // The available messages are enumerated in 'Message'\n    // and are executed by the routine 'handleMessage'.\n    // This is the case for stand alone programming and\n    // the programming of a group of XGo's.\n    // The handling of messages by a single routine garantees\n    // that leader and follower XGo's act exactly identical.\n\n    enum Message {\n\n        Stop,           // stops the walking\n        Wait,           // suspend the program for the specified time\n        Pause,          // pause the program until Message.Continue\n        Continue,       // continue the program after Message.Pause\n\n        FastWave,       // execute next message in a wave\n        NormalWave,\n        SlowWave,\n\n        Action,         // perform a standard action\n        Activity,       // inform follower to perform a numbered activity\n\n        Forward,        // move in the specified direction\n        Backward,\n        Left,\n        Right,\n\n        SetSpeed,       // set the speed between 0 and 100 %\n        SpeedUp,        // speeding up by 10 %\n        SlowDown,       // slowing down by 10 %\n\n        TurnLeft,       // turn as a continuous rotation\n        TurnRight,      // the rotation will be stopped by\n        TurnOff,        // a movement message or the stop message\n\n        ArmHigh,        // X:40, Z:90\n        ArmFront,       // X:70, Z:80\n        ArmLow,         // X:90, Z:50\n        ArmFloor,       // X:80, Z:10\n\n        ClampOpen,      // open the clamp to position CLAMPOPEN\n        ClampClose,     // close the clamp to position CLAMPCLOSED\n\n        Stand,          // perform an XGo standard action\n        Prone,\n        Sit,\n        Swing,\n        Greet,\n        Roll,\n        Whirl,\n        Crawl,\n        Stretch,\n        Squat,\n        Pee\n    }\n\n    let MESSAGE: number = -1\n    let ACTIVITY: number = 0\n    let PAUSE: boolean = false\n\n    ///////////////////////\n    // A STAND ALONE XGO //\n    ///////////////////////\n\n    // The routine 'setPlayer' is called with parameter\n    // 'Player.Alone'.\n\n    //////////////////////////////\n    // SEVERAL XGO'S IN A GROUP //\n    //////////////////////////////\n\n    // The routine 'setPlayer' is called with parameter\n    // 'Player.Leader', 'Player.Controller' or 'Player.Follower'.\n\n    // A group consists of one leader and several followers.\n    // The leader does not be an XGO, but can be a controller.\n\n    // A follower needs not to be programmed as it receives\n    // instructions from the master.\n    // Followers only need to be initialized by three blocks:\n    // - setGroup, specifying the group it is committed to.\n    // - setPlayer, using parameter 'Player.Follower'.\n    // - setPosition, specifying the position within the group.\n    // The position in the group determines the waiting time\n    // when an instruction must be performed in 'wave'-mode.\n\n    // On the other hand, a follower may be programmed, even\n    // if it belongs to a group. To avoid mixed activity by\n    // the own and received instructions, a leader or controller\n    // should call 'pauseFollowers' before sending messages and\n    // call 'continueFollower' when done.\n\n    // The leader or controller must be initialized too and\n    // will be programmed. \n    // - setGroup, specifying the group it is committed to.\n    // - setPlayer, using parameter 'Player.Leader' or\n    //              'Player.Controller'.\n\n    // The initial commitment to a group cannot be changed.\n\n    export enum Group {\n        //% block=\"group 1\"\n        //% block.loc.nl=\"groep 1\"\n        Group1,\n        //% block=\"group 2\"\n        //% block.loc.nl=\"groep 2\"\n        Group2,\n        //% block=\"group 3\"\n        //% block.loc.nl=\"groep 3\"\n        Group3,\n        //% block=\"group 4\"\n        //% block.loc.nl=\"groep 4\"\n        Group4,\n        //% block=\"group 5\"\n        //% block.loc.nl=\"groep 5\"\n        Group5,\n        //% block=\"group 6\"\n        //% block.loc.nl=\"groep 6\"\n        Group6,\n        //% block=\"group 7\"\n        //% block.loc.nl=\"groep 7\"\n        Group7,\n        //% block=\"group 8\"\n        //% block.loc.nl=\"groep 8\"\n        Group8,\n        //% block=\"group 9\"\n        //% block.loc.nl=\"groep 9\"\n        Group9\n    }\n\n    export enum Player {\n        //% block=\"alone\"\n        //% block.loc.nl=\"alleen\"\n        Alone,\n        //% block=\"as the leader\"\n        //% block.loc.nl=\"de leider\"\n        Leader,\n        //% block=\"as a follower\"\n        //% block.loc.nl=\"een volger\"\n        Follower,\n        //% block=\"as a controller\"\n        //% block.loc.nl=\"de controller\"\n        Controller\n    }\n\n    export enum Position {\n        //% block=\"position 1\"\n        //% block.loc.nl=\"positie 1\"\n        Position1,\n        //% block=\"position 2\"\n        //% block.loc.nl=\"positie 2\"\n        Position2,\n        //% block=\"position 3\"\n        //% block.loc.nl=\"positie 3\"\n        Position3,\n        //% block=\"position 4\"\n        //% block.loc.nl=\"positie 4\"\n        Position4,\n        //% block=\"position 5\"\n        //% block.loc.nl=\"positie 5\"\n        Position5,\n        //% block=\"position 6\"\n        //% block.loc.nl=\"positie 6\"\n        Position6,\n        //% block=\"position 7\"\n        //% block.loc.nl=\"positie 7\"\n        Position7,\n        //% block=\"position 8\"\n        //% block.loc.nl=\"positie 8\"\n        Position8,\n        //% block=\"position 9\"\n        //% block.loc.nl=\"positie 9\"\n        Position9\n    }\n\n    export enum Wave {\n        //% block=\"slow\"\n        //% block.loc.nl=\"langzame\"\n        Slow,\n        //% block=\"normal\"\n        //% block.loc.nl=\"gewone\"\n        Normal,\n        //% block=\"fast\"\n        //% block.loc.nl=\"snelle\"\n        Fast\n    }\n\n    let GROUP: number = 1\n    let PLAYER: Player = Player.Alone\n    let POSITION: number = 1\n    let WAVE: number = 0\n\n    /////////////////////////\n    // CONTROLLING THE XGO //\n    /////////////////////////\n\n    export enum Movement {\n        //% block=\"forward\"\"\n        //% block.loc.nl=\"vooruit\"\n        Forward,\n        //% block=\"backward\"\n        //% block.loc.nl=\"achteruit\"\n        Backward,\n        //% block=\"to the left\"\n        //% block.loc.nl=\"naar links\"\n        Left,\n        //% block=\"to the right\"\n        //% block.loc.nl=\"naar rechts\"\n        Right\n    }\n\n    export enum Rotation {\n        //% block=\"to the left\"\n        //% block.loc.nl=\"naar links\"\n        TurnLeft,\n        //% block=\"to the right\"\n        //% block.loc.nl=\"naar rechts\"\n        TurnRight,\n        //% block=\"30 deg to the left\"\n        //% block.loc.nl=\"30 gr naar links\"\n        RotateLeft,\n        //% block=\"30 deg to the right\"\n        //% block.loc.nl=\"30 gr naar rechts\"\n        RotateRight\n    }\n\n    export enum ArmPosition {\n        //% block=\"high up\"\"\n        //% block.loc.nl=\"ver omhoog\"\n        High, // X:40,Z90\n        //% block=\"straight to the front\"\n        //% block.loc.nl=\"recht naar voren\"\n        Front, // X:70,Z:80\n        //% block=\"low to the front\"\n        //% block.loc.nl=\"laag naar voren\"\n        Low, // X:90,Z:50\n        //% block=\"to the floor\"\n        //% block.loc.nl=\"naar de vloer\"\n        Floor // X:80,Z:10\n    }\n\n    export enum ClampState {\n        //% block=\"close\"\n        //% block.loc.nl=\"sluit\"\n        Close,\n        //% block=\"open\"\n        //% block.loc.nl=\"open\"\n        Open\n    }\n\n    let MOVEMENT: number = Message.Stop // the latest movement message\n\n    // Speed range:\n    // ------------\n    // Value: 0 to 100 (in %)\n    // Message: 1000 to 1100\n    let SPEED: number = 50\n\n    // Clamp range\n    // -----------\n    // Minimum value: 0 (equal to 22.5 mm)\n    // Maximum value: 255 (equal to 53.0 mm)\n    let CLAMPCLOSED: number = 0\n    let CLAMPOPEN: number = 255\n\n    export enum Action {\n        //% block=\"stand up\"\n        //% block.loc.nl=\"staan\"\n        Stand,\n        //% block=\"lay down\"\n        //% block.loc.nl=\"liggen\"\n        Prone,\n        //% block=\"swing\"\n        //% block.loc.nl=\"swingen\"\n        Swing,\n        //% block=\"greet\"\n        //% block.loc.nl=\"groeten\"\n        Greet,\n        //% block=\"roll\"\n        //% block.loc.nl=\"schudden\"\n        Roll,\n        //% block=\"whirl\"\n        //% block.loc.nl=\"wervelen\"\n        Whirl,\n        //% block=\"crawl\"\n        //% block.loc.nl=\"besluipen\"\n        Crawl,\n        //% block=\"stretch\"\n        //% block.loc.nl=\"uitrekken\"\n        Stretch,\n        //% block=\"squat\"\n        //% block.loc.nl=\"hurken\"\n        Squat,\n        //% block=\"pee\"\n        //% block.loc.nl=\"plassen\"\n        Pee\n    }\n\n    ///////////////////////////////\n    // MESSAGE HANDLING ROUTINES //\n    ///////////////////////////////\n\n    function stopMoving() {\n        xgo.move_xgo(xgo.direction_enum.Forward, 0)\n        xgo.move_xgo(xgo.direction_enum.Left, 0)\n        xgo.rotate(xgo.rotate_enum.Left, 0)\n    }\n\n    function handleMessage() {\n\n        if (PLAYER == Player.Leader || PLAYER == Player.Controller) {\n            radio.sendNumber(MESSAGE)\n            if (PLAYER == Player.Controller)\n                return;\n        }\n        // Instead of 'Message.Wait', this message is submitted by\n        // the calculated value of '10000 + wait time'.\n        let wait = 0\n        if (MESSAGE >= 10000) {\n            wait = MESSAGE - 10000\n            MESSAGE = Message.Wait\n        }\n\n        // Instead of 'Message.Speed', this message is submitted by\n        // the calculated value of '1000 + required speed'.\n        if (MESSAGE >= 1000) {\n            SPEED = MESSAGE - 1000\n            // reactivate the latest movement message\n            MESSAGE = MOVEMENT\n        }\n\n        // Instead of 'Message.Activity', this message is submitted by\n        // the calculated value of '500 + required activity'.\n        if (MESSAGE >= 500) {\n            ACTIVITY = MESSAGE - 500\n            MESSAGE = Message.Activity\n        }\n\n        // The messages 'Message.FastWave', 'Message.NormalWave'\n        // and 'Message.SlowWave' only set the WAVE variable\n        // depending on the follower's position.\n        // Afterwards, WAVE is used to pause before the\n        // execution of the next message to create the wave effect.\n        // Message.Stop however is excluded from the wave behaviour.\n        if (WAVE > 0 && MESSAGE != Message.Stop) {\n            basic.pause(WAVE * 1000)\n            WAVE = 0\n        }\n\n        switch (MESSAGE) {\n            case Message.Stop:\n                stopMoving()\n                break\n            case Message.Wait:\n                basic.pause(wait * 1000)\n                break\n            case Message.Pause:\n                PAUSE = true\n                stopMoving()\n                break\n            case Message.Continue:\n                PAUSE = false\n                break\n            case Message.FastWave:\n                WAVE = (POSITION - 1) * 0.3\n                break\n            case Message.NormalWave:\n                WAVE = (POSITION - 1) * 0.5\n                break\n            case Message.SlowWave:\n                WAVE = (POSITION - 1) * 1.0\n                break\n            //\n            // XGO MOVEMENT CONTROL\n            //\n            case Message.Forward:\n                MOVEMENT = Message.Forward\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                xgo.move_xgo(xgo.direction_enum.Forward, SPEED)\n                break\n            case Message.Backward:\n                MOVEMENT = Message.Backward\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                xgo.move_xgo(xgo.direction_enum.Backward, SPEED)\n                break\n            case Message.Left:\n                MOVEMENT = Message.Left\n                // left and right seem to have switched\n                xgo.move_xgo(xgo.direction_enum.Right, SPEED)\n                break\n            case Message.Right:\n                MOVEMENT = Message.Right\n                // left and right seem to have switched\n                xgo.move_xgo(xgo.direction_enum.Left, SPEED)\n                break\n            case Message.TurnLeft:\n                MOVEMENT = Message.TurnLeft\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Left, 100)\n                break\n            case Message.TurnRight:\n                MOVEMENT = Message.TurnRight\n                xgo.move_xgo(xgo.direction_enum.Left, 0)\n                xgo.rotate(xgo.rotate_enum.Right, 100)\n                break\n            case Message.TurnOff:\n                MOVEMENT = Message.TurnOff\n                xgo.rotate(xgo.rotate_enum.Left, 0)\n                break\n            case Message.SpeedUp:\n                SPEED += 10\n                if (SPEED > 100) SPEED = 100\n                // call handleMessage recursively to activate the speed\n                MESSAGE = MOVEMENT\n                handleMessage()\n                break\n            case Message.SlowDown:\n                SPEED -= 10\n                if (SPEED < 0) SPEED = 0\n                // call handleMessage recursively to activate the speed\n                MESSAGE = MOVEMENT\n                handleMessage()\n                break\n            //\n            // XGO ARM CONTROL\n            //\n            case Message.ArmHigh:\n                xgo.Manipulator_clampX(40)\n                xgo.Manipulator_clampZ(90)\n                break\n            case Message.ArmFront:\n                xgo.Manipulator_clampX(70)\n                xgo.Manipulator_clampZ(80)\n                break\n            case Message.ArmLow:\n                xgo.Manipulator_clampX(90)\n                xgo.Manipulator_clampZ(50)\n                break\n            case Message.ArmFloor:\n                xgo.Manipulator_clampX(80)\n                xgo.Manipulator_clampZ(10)\n                break\n            case Message.ClampClose:\n                xgo.Manipulator_clamp(CLAMPCLOSED)\n                break\n            case Message.ClampOpen:\n                xgo.Manipulator_clamp(CLAMPOPEN)\n                break\n            //\n            // XGO STANDARD ACTIONS\n            //\n            case Message.Stand: xgo.execution_action(xgo.action_enum.Default_posture); break;\n            case Message.Prone: xgo.body_height(0); xgo.servo_switch(xgo.servo_switch_enum.Unload); break;\n            case Message.Sit: xgo.execution_action(xgo.action_enum.Sit_down); break;\n            case Message.Pee: xgo.execution_action(xgo.action_enum.Pee); break;\n            case Message.Swing: xgo.execution_action(xgo.action_enum.Play_pendulum); break;\n            case Message.Greet: xgo.execution_action(xgo.action_enum.Wave); break;\n            case Message.Roll: xgo.execution_action(xgo.action_enum.Twirl_Roll); break;\n            case Message.Whirl: xgo.execution_action(xgo.action_enum.Whirl); break;\n            case Message.Crawl: xgo.execution_action(xgo.action_enum.Crawl_forward); break;\n            case Message.Stretch: xgo.execution_action(xgo.action_enum.Stretch_oneself); break;\n            case Message.Squat: xgo.execution_action(xgo.action_enum.Squat); break;\n            //\n            // NO NEED TO HANDLE Message.Activity HERE\n            //\n        }\n        MESSAGE = -1\n    }\n\n    radio.onReceivedNumber(function (receivedNumber: number) {\n        if (PLAYER == Player.Follower) {\n            MESSAGE = receivedNumber\n            handleMessage()\n        }\n    })\n\n    function playerID(): void {\n\n        if (PLAYER == Player.Alone)\n            basic.showString(\"A\")\n        else {\n            basic.showString(\"G\")\n            basic.showNumber(GROUP)\n        }\n\n        switch (PLAYER) {\n            case Player.Follower:\n                basic.showString(\"P\")\n                basic.showNumber(POSITION)\n                break;\n            case Player.Leader:\n                basic.showString(\"L\")\n                break\n            case Player.Controller:\n                basic.showString(\"C\")\n                break;\n        }\n        if (PLAYER != Player.Controller) {\n            basic.showIcon(IconNames.Happy)\n        }\n    }\n\n    input.onLogoEvent(TouchButtonEvent.Pressed, function () {\n        playerID()\n    })\n\n    ////////////////////////\n    // PROGRAMMING BLOCKS //\n    ////////////////////////\n\n    //% block=\"group\"\n    //% block.loc.nl=\"groep\"\n    export function group(): number {\n        return GROUP\n    }\n\n    //% block=\"join %group\"\n    //% block.loc.nl=\"sluit aan bij %group\"\n    export function setGroup(group: Group) {\n        GROUP = group + 1\n        radio.setGroup(GROUP)\n    }\n\n    //% block=\"position\"\n    //% block.loc.nl=\"positie\"\n    export function position(): number {\n        return POSITION\n    }\n\n    //% block=\"follow at %pos\"\n    //% block.loc.nl=\"volg op %pos\"\n    export function setPosition(pos: Position) {\n        POSITION = pos + 1\n    }\n\n    //% block=\"show player info\"\n    //% block.loc.nl=\"toon speler info\"\n    export function showPlayerID() {\n        playerID()\n    }\n\n    //% block=\"plays %player ?\"\n    //% block.loc.nl=\"speelt %player ?\"\n    export function isPlayer(player: Player): boolean {\n        return (player == PLAYER)\n    }\n\n    //% block=\"play %player\"\n    //% block.loc.nl=\"speel %player\"\n    export function setPlayer(player: Player) {\n        if (player != Player.Controller)\n            xgo.init_xgo_serial(SerialPin.P14, SerialPin.P13)\n        PLAYER = player\n    }\n\n    //% block=\"continue follower programs\"\n    //% block.loc.nl=\"hervat volger-programma's\"\n    export function continueFollowers() {\n        radio.sendNumber(Message.Continue)\n    }\n\n    //% block=\"suspend follower programs\"\n    //% block.loc.nl=\"onderbreek volger-programma's\"\n    export function pauseFollowers() {\n        radio.sendNumber(Message.Pause)\n    }\n\n    //% block=\"do a %wave wave\"\n    //% block.loc.nl=\"maak een %wave wave\"\n    export function setWave(wave: Wave) {\n        switch (wave) {\n            case Wave.Slow: MESSAGE = Message.SlowWave; break;\n            case Wave.Normal: MESSAGE = Message.NormalWave; break;\n            case Wave.Fast: MESSAGE = Message.FastWave; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"activity\"\n    //% block.loc.nl=\"activiteit\"\n    export function activity(): number {\n        return ACTIVITY\n    }\n\n    //% block=\"activity %activity\"\n    //% block.loc.nl=\"activiteit %activity\"\n    //% activity.min=1 activity.max=100 activity.defl=1\n    export function isActivity(activity: number): boolean {\n        if (ACTIVITY == activity) {\n            ACTIVITY = 0\n            return true\n        }\n        return false\n    }\n\n    //% block=\"perform activity %activity\"\n    //% block.loc.nl=\"doe activiteit %activity\"\n    //% activity.min=1 activity.max=100 activity.defl=1\n    export function performActivity(activity: number) {\n        MESSAGE = 500 + activity;\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"perform the %action\"\n    //% block.loc.nl=\"ga %action\"\n    export function performAction(action: Action) {\n        switch (action) {\n            case Action.Stand: MESSAGE = Message.Stand; break;\n            case Action.Prone: MESSAGE = Message.Prone; break;\n            case Action.Swing: MESSAGE = Message.Swing; break;\n            case Action.Greet: MESSAGE = Message.Greet; break;\n            case Action.Roll: MESSAGE = Message.Roll; break;\n            case Action.Whirl: MESSAGE = Message.Whirl; break;\n            case Action.Crawl: MESSAGE = Message.Crawl; break;\n            case Action.Stretch: MESSAGE = Message.Stretch; break;\n            case Action.Squat: MESSAGE = Message.Squat; break;\n            case Action.Pee: MESSAGE = Message.Pee; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"clamp size: closes to %closed mm and opens to %open mm width\"\n    //% block.loc.nl=\"grijper afmeting: sluit tot %closed mm en opent tot %open mm breedte\"\n    //% closed.min=25 closed.max=50.0 closed.defl=25\n    //% open.min=25 open.max=50.0 open.defl=50\n    // The motor takes a value range of 255 (closed) to 0 (open).\n    // The input in mm should be multiplied by (255-0)/(50-25) therefore.\n    export function setClampRange(closed: number, open: number) {\n        closed = (closed - 25) * 10.2\n        open = (open - 25) * 10.2\n        if (open > closed) {\n            // input was inverted\n            let n = closed\n            closed = open\n            open = n\n        }\n        CLAMPOPEN = open\n        CLAMPCLOSED = closed\n    }\n\n    //% block=\"%state the clamp\"\n    //% block.loc.nl=\"%state de grijper\"\n    export function clamp(state: ClampState) {\n        switch (state) {\n            case ClampState.Open: MESSAGE = Message.ClampOpen; break;\n            case ClampState.Close: MESSAGE = Message.ClampClose; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"move the arm %move\"\n    //% block.loc.nl=\"beweeg de arm %move\"\n    export function moveArm(position: ArmPosition) {\n        switch (position) {\n            case ArmPosition.High: MESSAGE = Message.ArmHigh; break;\n            case ArmPosition.Front: MESSAGE = Message.ArmFront; break;\n            case ArmPosition.Low: MESSAGE = Message.ArmLow; break;\n            case ArmPosition.Floor: MESSAGE = Message.ArmFloor; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"turn %rotation\"\n    //% block.loc.nl=\"draai %rotation\"\n    export function turn(rotation: Rotation) {\n        switch (rotation) {\n            case Rotation.TurnLeft: MESSAGE = Message.TurnLeft; break;\n            case Rotation.TurnRight: MESSAGE = Message.TurnRight; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"walk %movement\"\n    //% block.loc.nl=\"loop %movement\"\n    export function move(movement: Movement) {\n        switch (movement) {\n            case Movement.Forward: MESSAGE = Message.Forward; break;\n            case Movement.Backward: MESSAGE = Message.Backward; break;\n            case Movement.Left: MESSAGE = Message.Left; break;\n            case Movement.Right: MESSAGE = Message.Right; break;\n        }\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"set speed to %speed \\\\%\"\n    //% block.loc.nl=\"stel de snelheid in op %speed \\\\%\"\n    //% speed.min=0 speed.max=100 speed.defl=50\n    export function setSpeed(speed: number) {\n        MESSAGE = 1000 + speed;\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"stop\"\n    //% block.loc.nl=\"stop\"\n    export function stop() {\n        MESSAGE = Message.Stop\n        if (!PAUSE) handleMessage()\n    }\n\n    //% block=\"a number from %min utai %max\"\n    //% block.loc.nl=\"een getal van %min t/m %max\"\n    //% max.defl=10\n    export function randomInt(min: number, max: number): number {\n        let i = 0\n        if (min > max) {\n            i = min\n            min = max\n            max = i\n        }\n        i = max - min + 1\n        i = min + Math.floor(Math.random() * i)\n        return i\n    }\n\n    //% block=\"wait %time sec\"\n    //% block.loc.nl=\"wacht %time sec\"\n    //% min.defl=1\n    export function wait(time: number) {\n        MESSAGE = 10000 + time\n        if (!PAUSE) handleMessage()\n    }\n\n    //% color=\"#008800\"\n    //% block=\"comment: %dummy\"\n    //% block.loc.nl=\"uitleg: %dummy\"\n    //% min.defl=\"schrijf hier je uitleg\"\n    export function comment(dummy: string) {\n    }\n\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":23406,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"XGO\": \"github:elecfreaks/pxt-xgo#v1.3.9\""],[0,"\n"],[1,""],[0,"    "]],"start1":138,"start2":138,"length1":60,"length2":9},{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":235,"start2":235,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests gaan hier; deze zal niet worden gecompileerd wanneer dit pakket wordt gebruikt als extensie.\n"}]}],"snapshots":[{"timestamp":1734560523246,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-xgolite\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1734560689709}